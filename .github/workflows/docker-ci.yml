name: Hospital System CI/CD

on:
  push:
    branches: [notmain]
  workflow_dispatch:

env:
  IMAGE_OWNER: ${{ secrets.DOCKERHUB_USERNAME }}
  SHORT_SHA: ${{ github.sha }}

jobs:
  # ─────────── CI: Сборка и пуш образов ───────────
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          - service: app_registry
            context: ./app_registry
          - service: app_schedule
            context: ./app_schedule
          - service: db_migrations
            context: ./db_migrations

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push ${{ matrix.service }}
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.context }}/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_OWNER }}/${{ matrix.service }}:latest
            ${{ env.IMAGE_OWNER }}/${{ matrix.service }}:${{ env.SHORT_SHA }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ─────────── CD: Деплой на сервер ───────────
  deploy:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Prepare SSH environment
        run: |
          # Создаем временные файлы для SSH
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > key.pem
          chmod 600 key.pem
          ssh-keyscan -H ${{ secrets.SSH_HOST }} > known_hosts
          echo "SSH files prepared:"
          ls -la key.pem known_hosts

      - name: Copy configuration to server
        run: |
          # Копируем docker-compose.yml и .env на сервер
          scp -i key.pem -o UserKnownHostsFile=known_hosts \
            docker-compose.yml \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/opt/hospital/

          scp -i key.pem -o UserKnownHostsFile=known_hosts \
            .env \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/opt/hospital/

      - name: Deploy application stack
        run: |
          ssh -i key.pem -o UserKnownHostsFile=known_hosts \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'DEPLOY_EOF'
            set -euxo pipefail
            cd /opt/hospital
            
            # Обновляем образы
            docker compose pull
            
            # Перезапускаем контейнеры
            docker compose down --remove-orphans --timeout 60
            docker compose up -d --wait
            
            # Проверяем работу приложений
            sleep 10
            curl -f http://localhost:8000/health || echo "Registry health check failed"
            curl -f http://localhost:8001/schedules || echo "Schedule health check failed"
            
            # Применяем миграции
            docker compose run --rm db_migrations
            
            echo "✅ Deployment successful! $(date)"
          DEPLOY_EOF

      - name: Cleanup
        run: |
          rm -f key.pem known_hosts
          echo "Temporary files removed"