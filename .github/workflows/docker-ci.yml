name: Hospital System CI/CD

on:
  push:
    branches: [main_main]
  workflow_dispatch:

env:
  IMAGE_OWNER: ${{ secrets.DOCKERHUB_USERNAME }}
  SHORT_SHA: ${{ github.sha }}
  SSH_PORT: ${{ secrets.SSH_PORT || '22' }}

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          - service: app_registry
            context: ./app_registry
          - service: app_schedule
            context: ./app_schedule
          - service: db_migrations
            context: ./db_migrations

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push ${{ matrix.service }}
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.context }}/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_OWNER }}/${{ matrix.service }}:latest
            ${{ env.IMAGE_OWNER }}/${{ matrix.service }}:${{ env.SHORT_SHA }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: [self-hosted, linux]
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify server accessibility
        run: |
          echo "üîç Checking server ${{ secrets.SSH_HOST }}:$SSH_PORT..."
          if nc -z -w 10 "${{ secrets.SSH_HOST }}" "$SSH_PORT"; then
            echo "‚úÖ Server is reachable on port $SSH_PORT"
          else
            echo "‚ùå ERROR: Server ${{ secrets.SSH_HOST }}:$SSH_PORT unreachable"
            echo "Possible reasons:"
            echo "1. Incorrect SSH_HOST in secrets"
            echo "2. Firewall blocking port $SSH_PORT"
            echo "3. Server offline"
            echo "4. Network issues"
            exit 1
          fi

      - name: Prepare SSH environment
        run: |
          echo "üöÄ Starting SSH preparation..."
          
          # Create private key file securely
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > key.pem
          chmod 600 key.pem
          
          # Generate known_hosts with error handling
          echo "üîë Running ssh-keyscan..."
          ssh-keyscan -p "$SSH_PORT" -H "${{ secrets.SSH_HOST }}" > known_hosts 2>/dev/null || true
          
          # Test SSH connection
          echo "üß™ Testing SSH connection..."
          ssh -i key.pem \
              -p "$SSH_PORT" \
              -o UserKnownHostsFile=known_hosts \
              -o StrictHostKeyChecking=no \
              ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
              "echo '‚úÖ SSH successful! Host: \$(hostname)'"

      - name: Copy configuration to server
        run: |
          echo "üì§ Copying files to server..."
          scp -i key.pem \
              -P "$SSH_PORT" \
              -o UserKnownHostsFile=known_hosts \
              -o StrictHostKeyChecking=no \
            docker-compose.yml \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/opt/hospital/
          
          scp -i key.pem \
              -P "$SSH_PORT" \
              -o UserKnownHostsFile=known_hosts \
              -o StrictHostKeyChecking=no \
            .env \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/opt/hospital/
          
          echo "‚úÖ Files copied successfully"

      - name: Deploy application stack
        run: |
          echo "üöÄ Starting deployment..."
          ssh -i key.pem \
              -p "$SSH_PORT" \
              -o UserKnownHostsFile=known_hosts \
              -o StrictHostKeyChecking=no \
              ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'DEPLOY_EOF'
            set -e
            cd /opt/hospital
            
            echo "‚¨áÔ∏è Pulling new images..."
            docker compose pull
            
            echo "üîÑ Stopping old containers..."
            docker compose down --remove-orphans --timeout 60
            
            echo "üöÄ Starting all services..."
            docker compose up -d
            
            echo "‚è≥ Waiting for PostgreSQL to be ready..."
            for i in {1..60}; do
              if docker compose exec -T postgres pg_isready -U admin -d hospital; then
                echo "‚úÖ PostgreSQL is ready!"
                break
              fi
              echo "‚è±Ô∏è Waiting for PostgreSQL ($i/60)..."
              sleep 3
            done
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å PostgreSQL
            if ! docker compose exec -T postgres pg_isready -U admin -d hospital; then
              echo "‚ùå ERROR: PostgreSQL failed to start"
              docker compose logs postgres
              exit 1
            fi
            
            echo "üìù Applying database migrations..."
            docker compose run --rm db_migrations
            
            echo "üîÑ Restarting app services after migrations..."
            docker compose restart app_registry app_schedule
            
            echo "‚è≥ Waiting for services to initialize..."
            sleep 20
            
            echo "üìä Current container status:"
            docker compose ps
            
            echo "ü©∫ Performing health checks..."
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–∏—Å —Ä–µ–µ—Å—Ç—Ä–∞
            REGISTRY_OK=false
            for i in {1..30}; do
              if curl -sSf http://localhost:8000/health > /dev/null 2>&1; then
                echo "‚úÖ Registry health check passed"
                REGISTRY_OK=true
                break
              fi
              echo "‚è±Ô∏è Waiting for registry service ($i/30)..."
              sleep 3
            done
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–∏—Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π
            SCHEDULE_OK=false
            for i in {1..30}; do
              if curl -sSf http://localhost:8001/schedules > /dev/null 2>&1; then
                echo "‚úÖ Schedule health check passed"
                SCHEDULE_OK=true
                break
              fi
              echo "‚è±Ô∏è Waiting for schedule service ($i/30)..."
              sleep 3
            done
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏ –≤ —Å–ª—É—á–∞–µ –ø—Ä–æ–±–ª–µ–º
            if [ "$REGISTRY_OK" = false ]; then
              echo "‚ùå Registry health check failed. Logs:"
              docker compose logs --tail=50 app_registry
            fi
            
            if [ "$SCHEDULE_OK" = false ]; then
              echo "‚ùå Schedule health check failed. Logs:" 
              docker compose logs --tail=50 app_schedule
            fi
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            if [ "$REGISTRY_OK" = false ] || [ "$SCHEDULE_OK" = false ]; then
              echo "‚ùå Some services failed health checks"
              echo "üìä Final container status:"
              docker compose ps -a
              exit 1
            fi
            
            echo "‚úÖ Deployment completed successfully at $(date)"
            echo "üéâ All services are healthy!"
            echo "üìä Final status:"
            docker compose ps
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
            echo "üåê Available endpoints:"
            echo "  - Registry: http://localhost:8000"
            echo "  - Schedule: http://localhost:8001"
          DEPLOY_EOF
                
      - name: Cleanup
        run: |
          echo "üßπ Cleaning up..."
          rm -f key.pem known_hosts
          echo "‚úÖ Cleanup done"