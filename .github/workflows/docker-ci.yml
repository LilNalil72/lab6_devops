name: Hospital System CI/CD

on:
  push:
    branches: [notmain]
  workflow_dispatch:

env:
  IMAGE_OWNER: ${{ secrets.DOCKERHUB_USERNAME }}
  SHORT_SHA: ${{ github.sha }}
  # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è SSH-–ø–æ—Ä—Ç–∞
  SSH_PORT: ${{ secrets.SSH_PORT || '22' }}

jobs:
  build:
    # ... (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

  deploy:
    needs: build
    runs-on: [self-hosted, linux]
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify server accessibility
        run: |
          echo "üîç Checking server accessibility on port $SSH_PORT..."
          if ! nc -z -w 15 "${{ secrets.SSH_HOST }}" "$SSH_PORT"; then
            echo "‚ùå ERROR: Server ${{ secrets.SSH_HOST }}:$SSH_PORT is unreachable"
            echo "Possible reasons:"
            echo "1. Wrong IP/host in secrets.SSH_HOST"
            echo "2. Firewall blocking port $SSH_PORT"
            echo "3. Server offline or not responding"
            exit 1
          else
            echo "‚úÖ Server is reachable on port $SSH_PORT"
          fi

      - name: Prepare SSH environment
        run: |
          echo "Starting SSH preparation..."
          
          # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –∫–ª—é—á–æ–º (–±–µ–∑ –≤—ã–≤–æ–¥–∞ –≤ –ª–æ–≥)
          echo "Creating SSH key file..."
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > key.pem
          chmod 600 key.pem
          
          # –°–æ–∑–¥–∞–µ–º known_hosts —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
          echo "Creating known_hosts file..."
          ssh-keyscan -p "$SSH_PORT" -H "${{ secrets.SSH_HOST }}" > known_hosts 2>&1 || {
            echo "‚ö†Ô∏è Warning: ssh-keyscan failed. Continuing without host verification..."
            echo "" > known_hosts
          }

          # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø–æ—Ä—Ç–∞
          echo "Testing SSH connection to ${{ secrets.SSH_HOST }}:$SSH_PORT..."
          ssh -i key.pem \
              -p "$SSH_PORT" \
              -o UserKnownHostsFile=known_hosts \
              -o StrictHostKeyChecking=no \
              ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
              "echo '‚úÖ SSH connection successful! Hostname: \$(hostname)'"
          
          echo "‚úÖ SSH preparation completed!"

      - name: Copy configuration to server
        run: |
          echo "Copying files to server..."
          scp -i key.pem \
              -P "$SSH_PORT" \
              -o UserKnownHostsFile=known_hosts \
              -o StrictHostKeyChecking=no \
            docker-compose.yml \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/opt/hospital/
          
          scp -i key.pem \
              -P "$SSH_PORT" \
              -o UserKnownHostsFile=known_hosts \
              -o StrictHostKeyChecking=no \
            .env \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/opt/hospital/
          
          echo "‚úÖ Files copied successfully."

      - name: Deploy application stack
        run: |
          echo "Starting deployment..."
          ssh -i key.pem \
              -p "$SSH_PORT" \
              -o UserKnownHostsFile=known_hosts \
              -o StrictHostKeyChecking=no \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'DEPLOY_EOF'
            set -euxo pipefail
            echo "Changing to /opt/hospital directory..."
            cd /opt/hospital
            
            echo "Updating images..."
            docker compose pull --quiet
            
            echo "Restarting containers..."
            docker compose down --remove-orphans --timeout 60
            docker compose up -d --wait
            
            echo "Waiting for services to initialize..."
            sleep 15
            
            echo "Performing health checks..."
            curl --fail http://localhost:8000/health || echo "‚ö†Ô∏è Registry health check failed"
            curl --fail http://localhost:8001/schedules || echo "‚ö†Ô∏è Schedule health check failed"
            
            echo "Applying database migrations..."
            docker compose run --rm db_migrations
            
            echo "‚úÖ Deployment successful! $(date)"
          DEPLOY_EOF

      - name: Cleanup
        run: |
          echo "Cleaning up temporary files..."
          rm -f key.pem known_hosts
          echo "‚úÖ Cleanup completed."