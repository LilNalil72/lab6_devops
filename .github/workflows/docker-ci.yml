name: Hospital System CI/CD

on:
  push:
    branches: [notmain]
  workflow_dispatch:

env:
  IMAGE_OWNER: ${{ secrets.DOCKERHUB_USERNAME }}
  SHORT_SHA: ${{ github.sha }}
  SSH_PORT: ${{ secrets.SSH_PORT || '22' }}

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          - service: app_registry
            context: ./app_registry
          - service: app_schedule
            context: ./app_schedule
          - service: db_migrations
            context: ./db_migrations

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push ${{ matrix.service }}
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.context }}/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_OWNER }}/${{ matrix.service }}:latest
            ${{ env.IMAGE_OWNER }}/${{ matrix.service }}:${{ env.SHORT_SHA }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: [self-hosted, linux]
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify server accessibility
        run: |
          echo "üîç Checking server ${{ secrets.SSH_HOST }}:$SSH_PORT..."
          if nc -z -w 10 "${{ secrets.SSH_HOST }}" "$SSH_PORT"; then
            echo "‚úÖ Server is reachable on port $SSH_PORT"
          else
            echo "‚ùå ERROR: Server ${{ secrets.SSH_HOST }}:$SSH_PORT unreachable"
            echo "Possible reasons:"
            echo "1. Incorrect SSH_HOST in secrets"
            echo "2. Firewall blocking port $SSH_PORT"
            echo "3. Server offline"
            echo "4. Network issues"
            exit 1
          fi

      - name: Prepare SSH environment
        run: |
          echo "üöÄ Starting SSH preparation..."
          
          # Create private key file securely
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > key.pem
          chmod 600 key.pem
          
          # Generate known_hosts with error handling
          echo "üîë Running ssh-keyscan..."
          ssh-keyscan -p "$SSH_PORT" -H "${{ secrets.SSH_HOST }}" > known_hosts 2>/dev/null || true
          
          # Test SSH connection
          echo "üß™ Testing SSH connection..."
          ssh -i key.pem \
              -p "$SSH_PORT" \
              -o UserKnownHostsFile=known_hosts \
              -o StrictHostKeyChecking=no \
              ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
              "echo '‚úÖ SSH successful! Host: \$(hostname)'"

      - name: Copy configuration to server
        run: |
          echo "üì§ Copying files to server..."
          scp -i key.pem \
              -P "$SSH_PORT" \
              -o UserKnownHostsFile=known_hosts \
              -o StrictHostKeyChecking=no \
            docker-compose.yml \
            .env \
            prometheus.yml \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/opt/hospital/
          
          # Copy Grafana configs
          scp -r -i key.pem \
              -P "$SSH_PORT" \
              -o UserKnownHostsFile=known_hosts \
              -o StrictHostKeyChecking=no \
            grafana-config \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/opt/hospital/

      - name: Deploy application stack
        run: |
          echo "üöÄ Starting deployment..."
          ssh -i key.pem \
              -p "$SSH_PORT" \
              -o UserKnownHostsFile=known_hosts \
              -o StrictHostKeyChecking=no \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'DEPLOY_EOF'
            set -e
            cd /opt/hospital
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤ 
            SUDO_PASSWORD='${{ secrets.SUDO_PASSWORD }}'
            
            # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥–∏ –¥–ª—è Grafana
            echo "üõ† Creating Grafana directories..."
            echo "$SUDO_PASSWORD" | sudo -S mkdir -p grafana-config/datasources grafana-config/dashboards 2>/dev/null
            echo "$SUDO_PASSWORD" | sudo -S chown -R 472:472 grafana-config/datasources grafana-config/dashboards 2>/dev/null
            echo "$SUDO_PASSWORD" | sudo -S chmod -R 775 grafana-config/datasources grafana-config/dashboards 2>/dev/null
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ç–æ–º –¥–ª—è —á–∏—Å—Ç–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
            docker volume rm -f hospital_pg_data 2>/dev/null || true
            
            echo "‚¨áÔ∏è Pulling new images..."
            docker compose pull
            
            echo "üîÑ Restarting containers..."
            docker compose down --remove-orphans --timeout 60
            docker compose up -d --wait postgres app_registry app_schedule prometheus grafana
            
            echo "‚è≥ Waiting for PostgreSQL initialization..."
            for i in {1..30}; do
              if docker compose exec postgres pg_isready -U admin; then
                echo "‚úÖ PostgreSQL is ready!"
                break
              fi
              echo "‚è± Waiting for PostgreSQL ($i/30)..."
              sleep 2
            done
            
            if ! docker compose exec postgres pg_isready -U admin; then
              echo "‚ùå ERROR: PostgreSQL failed to start"
              docker compose logs postgres
              exit 1
            fi
            
            echo "‚è≥ Waiting for services to initialize..."
            sleep 15
            
            echo "ü©∫ Performing health checks..."
            # Registry service
            if curl -sSf http://localhost:8000/health; then
              echo "‚úÖ Registry health check passed"
            else
              echo "‚ùå Registry health check failed"
              docker compose logs app_registry
              exit 1
            fi
            
            # Schedule service
            if curl -sSf http://localhost:8001/schedules; then
              echo "‚úÖ Schedule health check passed"
            else
              echo "‚ùå Schedule health check failed"
              docker compose logs app_schedule
              exit 1
            fi
            
            # Prometheus
            if curl -sSf http://localhost:9090/-/ready; then
              echo "‚úÖ Prometheus health check passed"
            else
              echo "‚ùå Prometheus health check failed"
              docker compose logs prometheus
              exit 1
            fi
            
            # Grafana
            if curl -sSf http://localhost:3000/api/health; then
              echo "‚úÖ Grafana health check passed"
            else
              echo "‚ùå Grafana health check failed"
              docker compose logs grafana
              exit 1
            fi
            
            echo "üìù Applying database migrations..."
            docker compose run --rm db_migrations
            
            echo "‚úÖ Deployment completed at $(date)"
            echo "Grafana: http://$(hostname -I | awk '{print $1}'):3000 (admin/grafana)"
            echo "Prometheus: http://$(hostname -I | awk '{print $1}'):9090"
          DEPLOY_EOF

      - name: Cleanup
        run: |
          echo "üßπ Cleaning up..."
          rm -f key.pem known_hosts
          echo "‚úÖ Cleanup done"