name: Build, Push and Deploy

on:
  push:
    branches: [notmain]
  workflow_dispatch:

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push Registry Service
        uses: docker/build-push-action@v4
        with:
          context: ./app_registry
          file: ./app_registry/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKERHUB_USERNAME }}/app_registry:latest
            ${{ env.DOCKERHUB_USERNAME }}/app_registry:${{ github.sha }}

      - name: Build & Push Schedule Service
        uses: docker/build-push-action@v4
        with:
          context: ./app_schedule
          file: ./app_schedule/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKERHUB_USERNAME }}/app_schedule:latest
            ${{ env.DOCKERHUB_USERNAME }}/app_schedule:${{ github.sha }}

      - name: Build & Push DB Migrations
        uses: docker/build-push-action@v4
        with:
          context: ./db_migrations
          file: ./db_migrations/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKERHUB_USERNAME }}/db_migrations:latest
            ${{ env.DOCKERHUB_USERNAME }}/db_migrations:${{ github.sha }}

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Setup SSH environment
        run: |
          # –°–æ–∑–¥–∞–µ–º .ssh –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # –î–æ–±–∞–≤–ª—è–µ–º —Ö–æ—Å—Ç –≤ known_hosts
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ
          ls -la ~/.ssh

      - name: Test SSH connection
        run: |
          ssh -T -o StrictHostKeyChecking=no \
              ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
              "echo 'SSH connection successful!'; hostname; date"

      - name: Deploy to server
        run: |
          ssh -o StrictHostKeyChecking=no \
              ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
              "cd /opt/hospital && \
               docker-compose down --remove-orphans && \
               docker-compose pull && \
               docker-compose up -d && \
               echo 'Docker services updated' && \
               docker run --rm \
                 --network hospital_default \
                 -e DB_HOST=postgres \
                 -e DB_PORT=5432 \
                 -e DB_NAME=hospital \
                 -e DB_USER=admin \
                 -e DB_PASSWORD=securepass \
                 ${{ env.DOCKERHUB_USERNAME }}/db_migrations:latest && \
               echo 'üü¢ Deployment successful! $(date)'"